package generator;

import core.BaseSequence;
import rules.DNARulesCollection;
import java.util.stream.Stream;

public class SeqGeneratorWithRulesProb implements SeqGenerator {
    public static final int DEFAULT_LEN = 60;
    public static final float DEFAULT_GC = 0.5f;

    private final DNARulesCollection rules;
    private final int len;
    private final float gc;
    private final float maxError;

    /**
     * Creates a BaseSequence generator that generates sequences that obey certain rules. The target GC content is achieved probabilistically.
     * @param maxError the maximum error allowed for a BaseSequence generated by this instance.
     * @param rules the rules each BaseSequence generated has to obey.
     */
    public SeqGeneratorWithRulesProb(float maxError, DNARulesCollection rules) {
        this(DEFAULT_LEN, DEFAULT_GC, maxError, rules);
    }

    /**
     * Creates a BaseSequence generator that generates sequences that obey certain rules.
     * @param len the target length of the generated BaseSequence.
     * @param gc the target GC content of the generated BaseSequence.
     * @param maxError the maximum error allowed for a BaseSequence generated by this instance.
     * @param rules the rules each BaseSequence generated has to obey.
     */
    public SeqGeneratorWithRulesProb(int len, float gc, float maxError, DNARulesCollection rules) {
        this.len = len;
        this.gc = gc;
        this.maxError = maxError;
        this.rules = rules;
    }

    /**
     * @return a BaseSequence satisfying the given constraints.
     */
    @Override
    public BaseSequence generate() {
        return Stream.generate(() -> BaseSequence.random(len, gc)).filter(seq -> rules.evalErrorByLimit(seq, maxError) <= maxError).findFirst().orElseThrow();
    }
}
